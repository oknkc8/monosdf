train{
    expname = debug_dtu_grid_3views_reg
    expcomment = normal_smooth_warping_pixel
    dataset_class = datasets.scene_dataset.SceneDatasetDN
    model_class = model.network.MonoSDFNetwork
    loss_class = model.loss.MonoSDFLoss
    learning_rate = 5.0e-4
    lr_factor_for_grid = 1.0
    num_pixels = 1024
    checkpoint_freq = 100
    plot_freq = 100
    split_n_pixels = 2048
    reg_patch_size = 16
}
plot{
    plot_nimgs = 1
    resolution = 512
    grid_boundary = [-1.2, 1.2]
}
loss{
    rgb_loss = torch.nn.L1Loss
    eikonal_weight = 0.1
    normal_smooth_weight = 0.1
    patch_depth_smooth_weight = 0.0
    patch_normal_smooth_weight = 0.0
    entropy_weight = 0.00
    entropy_log_scaling = False
    entropy_acc_thresh = 0.9
    patch_rgb_ncc_weight = 0.0
    patch_rgb_loss = ssim
    warped_rgb_weight = 1.0
    depth_weight = 0.0
    normal_l1_weight = 0.0
    normal_cos_weight = 0.0
    min_visibility = 1e-3
    end_step = 12800
    start_reg_step = 0
}
dataset{
    data_dir = DTU
    img_res = [384, 384]
    scan_id = 65
    center_crop_type = center_crop_for_dtu
    num_views = 3
    near_pose_type = rot_from_origin
    near_pose_rot = 5
    near_pose_trans = 0.1
}
model{
    feature_vector_size = 256
    scene_bounding_sphere = 5.0
    
    Grid_MLP = True

    use_patch_reg = True
    use_unseen_pose = False
    use_warped_colors = True
    h_patch_size = 0

    implicit_network
    {
        d_in = 3
        d_out = 1
        dims = [ 256, 256]
        geometric_init = True
        bias = 0.6
        skip_in = [4]
        weight_norm = True
        multires = 6
        use_grid_feature = True
        divide_factor = 5.0 # 1.5 for replica, 6 for dtu, 3.5 for tnt, 1.5 for bmvs, we need it to normalize the points range for multi-res grid
    }
    rendering_network
    {
        mode = idr
        d_in = 9
        d_out = 3
        dims = [ 256, 256] #, 256, 256]
        weight_norm = True
        multires_view = 4
    }
    density
    {
        params_init{
            beta = 0.1
        }
        beta_min = 0.0001
    }
    ray_sampler
    {
        near = 2.0
        N_samples = 64
        N_samples_eval = 128
        N_samples_extra = 32
        eps = 0.1
        beta_iters = 10
        max_total_iters = 5

        anneal_near_far = False
        anneal_n_steps = 50
        anneal_init_perc = 1.0
        anneal_mid_perc = 0.5
    }
    ray_tracer
    {
        n_steps = 128
        n_iterations = 5
        bisection_iterations = 10
        epsilon = 0.1
        N_samples_interval = 64
        inverse_cdf_proportion = 0.9
    }
}
